package variables

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/jenkins-x-plugins/jx-gitops/pkg/rootcmd"
	"github.com/jenkins-x/go-scm/scm"
	"github.com/jenkins-x/jx-helpers/v3/pkg/cobras/helper"
	"github.com/jenkins-x/jx-helpers/v3/pkg/cobras/templates"
	"github.com/jenkins-x/jx-helpers/v3/pkg/files"
	"github.com/jenkins-x/jx-helpers/v3/pkg/scmhelpers"
	"github.com/jenkins-x/jx-helpers/v3/pkg/termcolor"
	"github.com/jenkins-x/jx-logging/v3/pkg/log"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

var (
	info = termcolor.ColorInfo

	cmdLong = templates.LongDesc(`
		Adds Pull Request environment variables to the .jx/variables.sh file
`)

	cmdExample = templates.Examples(`
		# add Pull Request env vars to the .jx/variables.sh file
		%s pr variables
	`)
)

// Options the options for the command
type Options struct {
	scmhelpers.PullRequestOptions

	File   string
	Result *scm.PullRequest
}

// NewCmdPullRequestVariables creates a command object for the command
func NewCmdPullRequestVariables() (*cobra.Command, *Options) {
	o := &Options{}

	cmd := &cobra.Command{
		Use:     "variables",
		Short:   "Adds Pull Request environment variables to the .jx/variables.sh file",
		Long:    cmdLong,
		Aliases: []string{"var", "variable"},
		Example: fmt.Sprintf(cmdExample, rootcmd.BinaryName),
		Run: func(cmd *cobra.Command, args []string) {
			err := o.Run()
			helper.CheckErr(err)
		},
	}
	o.PullRequestOptions.AddFlags(cmd)
	cmd.Flags().StringVarP(&o.File, "file", "f", filepath.Join(".jx", "variables.sh"), "the default variables file to lazily create or enrich")

	return cmd, o
}

// Run implements the command
func (o *Options) Run() error {
	err := o.PullRequestOptions.Validate()
	if err != nil {
		return errors.Wrapf(err, "failed to ")
	}
	pr, err := o.DiscoverPullRequest()
	if err != nil {
		return errors.Wrapf(err, "failed to discover the pull request")
	}
	if pr == nil {
		return errors.Errorf("no Pull Request could be found for %d in repository %s", o.Number, o.Repository)
	}
	return o.displayPullRequest(pr)
}

func (o *Options) displayPullRequest(pr *scm.PullRequest) error {
	o.Result = pr

	e := map[string]string{
		"PR_BASE_SHA": pr.Base.Sha,
		"PR_BASE_REF": pr.Base.Ref,
		"PR_HEAD_REF": pr.Head.Ref,
		"PR_HEAD_SHA": pr.Head.Sha,
	}

	for _, label := range pr.Labels {
		n := strings.ReplaceAll(label.Name, "/", "_")
		n = strings.ReplaceAll(n, "-", "_")
		n = "PR_LABEL_" + strings.ToUpper(n)
		e[n] = "true"
	}

	var lines []string
	for k, v := range e {
		lines = append(lines, fmt.Sprintf("export %s=\"%s\"", k, v))
	}
	sort.Strings(lines)
	return o.modifyVariables(strings.Join(lines, "\n"))

}

func (o *Options) modifyVariables(text string) error {
	err := o.Validate()
	if err != nil {
		return errors.Wrapf(err, "failed to validate")
	}

	file := o.File
	if o.Dir != "" {
		file = filepath.Join(o.Dir, file)
	}
	exists, err := files.FileExists(file)
	if err != nil {
		return errors.Wrapf(err, "failed to check if file exists %s", file)
	}
	source := ""

	if exists {
		data, err := ioutil.ReadFile(file)
		if err != nil {
			return errors.Wrapf(err, "failed to read file %s", file)
		}
		source = string(data)
	}

	buf := strings.Builder{}
	buf.WriteString("\n# generated by: jx gitops pr variables\n")

	buf.WriteString(text)
	buf.WriteString("\n")

	if source != "" {
		buf.WriteString("\n\n# content from git...\n")
		buf.WriteString(source)
	}

	source = buf.String()
	dir := filepath.Dir(file)
	err = os.MkdirAll(dir, files.DefaultDirWritePermissions)
	if err != nil {
		return errors.Wrapf(err, "failed to create dir %s", dir)
	}
	err = ioutil.WriteFile(file, []byte(source), files.DefaultFileWritePermissions)
	if err != nil {
		return errors.Wrapf(err, "failed to save %s", file)
	}
	log.Logger().Infof("added variables to file: %s", info(file))
	return nil
}
